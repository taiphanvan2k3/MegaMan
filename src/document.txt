1/ GamePanel: tạo 1 panel ( đc dùng để làm màn hình game)
-Lớp này vừa implements Runnable để tạo ra thread cho việc
render và update frame ( với FPS=80)
-Ngoài ra còn implements KeyListener để có thể bắt sự kiện
khi nhấn phím ( cũng có thể tạo 1 class riêng cũng được )
rồi addListener vào jframe để bắt sự kiện
2/ InputManager: nhận cái keyCode có được từ việc thao
tác bàn phím để đi xử lí cho hành động nhân vật

3/Các cách để lấy ra 1 tấm hình:
C1: Cho tấm hình đó vào 1 thư mục rồi đọc file đó lên
BufferedImage image=ImageIO.read(new File("data/megasprite.png"));
g.drawImage(image, x, y, this);
rồi vẽ lên panel
C2: Dùng cách giống setIcon
Image img=new ImageIcon(this.getClass().getResource("/megasprite.png")).getImage();
g.drawImage(img, x, y, this); : là phương thức để đối tượng lớp graphic vẽ Image
đều được

4/Phươg thức subImage để lấy ra 1 hình con từ hình có sẵn
subImage=image.getSubimage(x, y, WIDTH, HEIGHT);
Dựa vào tham số có thể thay nó lấy 1 HCN bắt đầu từ (x,y) và hcn đó có chiều rộng 
và chiều cao như tham số

5/Chú ý:
	Xây dựng copy constructor
	public FrameImage(FrameImage frameImage) {
		// Tránh việc rắc rối khi image của frameImage thay đổi thì
		// this.image cũng thay đổi theo => Ta cần new Image mới
		this.image = new BufferedImage(frameImage.getImageWidth(), frameImage.getImageHeight(),
				frameImage.getImage().getType());

		// Lúc này image mới chỉ có kích thước là chiều rộng,chiều cao và loại ảnh
		// như bức ảnh của tham số frameImage chứ chưa có hình ảnh nào cả

		// Bây giờ cần vẽ ảnh lên cái image đó
		// Lấy ra Graphics của image thì g là "cây cọ" của chính image
		// nên khi g.drawImage thì sẽ vẽ lên đối tượng image
		Graphics g = image.getGraphics();
		g.drawImage(frameImage.getImage(), 0, 0, null);
	}

6/Next step: Xây dựng class Animation
Lật ngược ảnh sang trái
			BufferedImage img = this.frameImages.get(i).getImage();
			// Lật ngược ảnh sang trái
			AffineTransform tx = AffineTransform.getScaleInstance(-1, 1);
			tx.translate(-img.getWidth(), 0);

			AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_BILINEAR);
			img = op.filter(img, null);
			
7/ Mỗi FrameImage sẽ chứa một subImage.Thêm nhiều FrameImage vào Animation rồi vẽ sẽ tạo ra chuyển động
8/
*Đối với frame.txt 
Dòng đầu chứa tổng số frame
Chứa thông tin các frame gồm:
-Tên subImage
-Đường dẫn tấm hình lớn để getSubImage
-x
-y
-w
-h

*Đối với animation.txt
Dòng đầu chứa tổng số animation
-Với mỗi animation sẽ có:
+Tên aniamtion
+Dòng tiếp theo chứa các frame trong animation đó
(gồm tên frame và delayTime)

9/Next steep: xây dựng class CacheDataLoader để đọc dữ liệu từ file frame.txt và animation.txt
Ôn tập đọc file
FileReader fr = new FileReader(frameFile);
BufferedReader br = new BufferedReader(fr);

10/ next steep: kĩ thuật vẽ hình đệm tại gamepanel
-Việc mỗi lần update hay render phải vẽ lại panel 
(vẽ lại các hình) 
=> Làm việc này sẽ khiến chương trình có 1 khoảng delay, giật lag
-Nếu vẽ từng hình ảnh một cách TUẦN TỰ sẽ khiến việc hiển thị
hình ảnh không đồng đều
=>Do đó thay vì vẽ các đối tượng image lên 1 panel thì vẽ các 
đối tượng đó lên cái Image khác rồi vẽ image đó lên panel

11/Tạo package gameObject
-Xây dựng class megaMan
-Tạo phương thức updateGame
-Tạo chuyển động qua trái,phải,mũi tên lên,space (để nhảy) cho megaMan trong
class inputManager

12/Làm map cho nhân vật di chuyển trên
-Xây dựng physical map: 
+Dùng hcn để cấu tạo nên cái map
+Dùng ma trận để thể hiện: 
0 => Ko có hcn, 1 có hcn
+Xây dựng hàm load dữ liệu từ phys_map.txt trong
class cacheDataLoader để lưu vào mảng 2 chiều phys_map

13/Xây dựng class PhysicalMap
- titleSize: độ dài cạnh hình vuông
hình vuông có giá trị bằng 1 là vật cản, 0 là không có gì 

Chú ý: 
Graphics giống như một cây cọ, các container như JFrame,JPanel,Image
đều có cây cọ này. Nếu ta getGraphics từ JFrame rồi lấy cây cọ đó vẽ
thì sẽ vẽ lên JFrame, cọ của container nào thì vẽ lên container đó

14/ Xây dựng lớp GameWorld
-Đặt physical và megaMan vào class này để dễ dàng cập nhật
Tại đây sẽ thực hiện khởi tạo megaMan, physicalMap đồng thời render
và update chúng, chứ không update, render tại GamePanel nữa.

-Bổ sung tại lớp MegaMan phướng thức getBoundForCollisionWithMap
15/ Xây dựng lớp abstract GameObject 
(lớp cơ sở nhất của tất cả đối tượng trong game)
- Do có một số đối tượng game có một số điểm chung nên cần tạo ra lớp cơ sở
( chẳng hạn như posX,posY)
Lớp này sẽ có phương thức ảo là Update() vì các nhân vật game 
đều cần phương thức update để cập nhật posX,posY
- Trong game có 2 loại đối tượng: 1 cái liên quan đến đối tượng to lớn như map
(physicalMap và backgroundMap). Còn loại kia liên quan đến các đối tượng
cụ thể tương tác được chẳng hạn như nhân vật,quái,đạn...

16/ Xây dựng lớp ParticularObject
- Ta không để thuộc tính weight,height,mass,speedX,speedY,blood 
vào GameObject vì điều này không đúng vì map thì làm gì có các 
thuộc tính trên.
=> Do đó ta sẽ thêm các thuộc tính chỉ vào các class nhân vật thôi
cụ thể là lớp cơ sở ParticularObject kế thừa từ lớp GameObject

17/ Xây dựng thêm phương thức va chạm với trần, tường bên trái,phải
tại lớp Physical map

18/Xây dựng lớp Human
- Đây là lớp đại diện cho lớp có tay chân như megaman,boss
- Như nói ở trước thì particularObject có thể gồm nhân vật,đạn
do đó chưa cụ thể lắm, vì vậy xây dựng thêm lớp con là Human
để kể thừa lớp particularObject.Lớp human sẽ lớp là cho các nhân
vật có tay chân, có các thuộc tính như jump,land

19/Sửa lại code cho class megaMan và inputManager
Tiến hành cho megaMan kế thừa từ class Human

20/Xây dựng lớp Camera
- Làm lớp này để khung hình đi theo nhân vật
- Map cứng, chỉ có camera mới thay đổi thôi,camera nó di chuyển trên map
và đi theo nhân vật
- Camera sẽ là 1 thuộc tính của lớp GameWorld giống như MegaMan và PhysicalMap
- Khi camera di chuyển thì cảnh của map cũng thay đổi theo do đó cần chỉnh sửa
lại phương thức draw của lớp physicalMap , drawCollisionWithMap và drawCollisionWithEnemy ở lớp
particularObject

21/Fix không cho megaman nhảy liên tục trên không
bằng cách thay đổi nút nhảy lên của inputManager, thay đổi thành jump

-Viết phương thức draw cho megaMan để tạo animation

21/Để viết được phương thức thì phải viết được Bullet
Như đã nói tại mục 18 thì particularObject mô tả cho nhân vật và đạn
do đó ta sẽ cho Bullet kế thừa từ particularObject
-Viết lớp BlueFire

22/Xây dựng lớp ParticularObjectManager
Lớp này có tác dụng quản lí tất cả các object trong game trong 1 List
-Xây dựng lớp này rất tiện cho việc thay vì ghi megaman.update(),megaman.draw(),....
thì ta xây dựng luôn 1 hàm update và draw để vẽ các đối tượng còn được thấy trong camera

23/Xây dựng lớp BulletManager kế thừa từ lớp ParticularObjectManager
và thêm đối tượng lớp BulletManager vào gameWorld
**Nhắc lại: các đối tượng trong game đều giữ 1 thuộc tính là GameWorld để
nó biết được vị trí của camera ở đâu để mà cập nhật và một số chức năng khác
-Làm phương thức attack() cho megaMan

24/Làm lớp xây dựng cảnh vật trong game BackgroundMap
- Trước tiên phải viết phương thức loadBackgroundMap từ file vào trước tại
lớp CacheDataLoader
- PhysicalMap bây giờ không cần vẽ nữa nhưng nó rất quan trọng trong việc
xử lí va chạm với nhân vật.Còn BackgroundMap chỉ đơn thuần là đồ hoạ lên thôi
chứ không xử lí va chạm gì cả.

-Chú ý phải vào GamePanel tại phương thức renderGame phải xoá đi fillRect
vì lúc này ta đã có hàm draw của backGroundMap để vẽ toàn bộ màn hình rồi.

25/Viết class đạn và quái RedEye
-Sửa lại GameWorld, thêm thuộc tính là đối tượng lớp ParticularObjectManager
vào, xong add megaMan vào đó. Do đó ta không cần megaMan.draw() nữa, thay vào
đó ta dùng lớp particularObjectManager.draw(), cũng như là Update()
- Và lưu ý tại lớp particularObjectManager khi Update sẽ gọi đến phương thức 
Update() của mỗi đối tượng có trong list, nếu đối tượng nào mà để update() thay vì
Update() thì sẽ bị lỗi do lúc này không phải override, và chương trình sẽ đi gọi
Update() ở lớp cha => Dẫn đến kết quả không mong muốn.

-Viết phương thức initEnemies() tại lớp GameWorld để sinh ra các con quái

26/Xử lí va chạm với đạn tại phương thức Update của lớp Bullet
và va chạm với quái tại phương thức Update của ParticularObject

27/Làm âm thanh cho game
-Sử dụng lớp AudioClip
-Viết phần load file âm thanh lên trong CacheDataLoader.
-Sử dụng âm thanh
- Làm âm thanh background cho GameWold

28/Xây dựng lớp FinalBoss
-Mấy con quái khác thì chỉ cần extends ParticularObject thôi,còn 
FinalBoss có nhiều động tác bay nhảy giống megaMan hơn nên sẽ extends Humans
-Xây dựng đạn của boss với class RocketBullet

-Xoá phương thức update,render tại lớp GamePanel
vì giờ đây đã có Update(),Render() trong GameWorld
phụ trách rồi